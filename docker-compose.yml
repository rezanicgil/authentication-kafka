services:
  postgres:
    image: postgres:15-alpine
    container_name: user-postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - user-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: user-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - user-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: user-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - user-network

  app:
    build: .
    container_name: user-microservice
    depends_on:
      - postgres
      - kafka
    ports:
      - "3000:3000"
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: userdb
      JWT_SECRET: your-jwt-secret-key
      JWT_EXPIRES_IN: 1d
      KAFKA_BROKER: kafka:29092
      PORT: 3000
    networks:
      - user-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: user-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - user-network

  grafana:
    image: grafana/grafana:latest
    container_name: user-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - user-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: user-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@postgres:5432/userdb?sslmode=disable"
    depends_on:
      - postgres
    networks:
      - user-network

volumes:
  postgres_data:
  grafana_data:

networks:
  user-network:
    driver: bridge